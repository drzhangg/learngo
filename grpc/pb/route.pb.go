// Code generated by protoc-gen-go. DO NOT EDIT.
// source: route.proto

package route

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	Latitude             int32    `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            int32    `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Feature struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location             *Point   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Feature) Reset()         { *m = Feature{} }
func (m *Feature) String() string { return proto.CompactTextString(m) }
func (*Feature) ProtoMessage()    {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{1}
}

func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

type Rectangle struct {
	Lo                   *Point   `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi                   *Point   `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{2}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLo() *Point {
	if m != nil {
		return m.Lo
	}
	return nil
}

func (m *Rectangle) GetHi() *Point {
	if m != nil {
		return m.Hi
	}
	return nil
}

type RouteNote struct {
	Location             *Point   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteNote) Reset()         { *m = RouteNote{} }
func (m *RouteNote) String() string { return proto.CompactTextString(m) }
func (*RouteNote) ProtoMessage()    {}
func (*RouteNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{3}
}

func (m *RouteNote) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteNote.Unmarshal(m, b)
}
func (m *RouteNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteNote.Marshal(b, m, deterministic)
}
func (m *RouteNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteNote.Merge(m, src)
}
func (m *RouteNote) XXX_Size() int {
	return xxx_messageInfo_RouteNote.Size(m)
}
func (m *RouteNote) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteNote.DiscardUnknown(m)
}

var xxx_messageInfo_RouteNote proto.InternalMessageInfo

func (m *RouteNote) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *RouteNote) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RouteSummary struct {
	PointCount           int32    `protobuf:"varint,1,opt,name=point_count,json=pointCount,proto3" json:"point_count,omitempty"`
	FeatureCount         int32    `protobuf:"varint,2,opt,name=feature_count,json=featureCount,proto3" json:"feature_count,omitempty"`
	Distance             int32    `protobuf:"varint,3,opt,name=distance,proto3" json:"distance,omitempty"`
	ElapsedTime          int32    `protobuf:"varint,4,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteSummary) Reset()         { *m = RouteSummary{} }
func (m *RouteSummary) String() string { return proto.CompactTextString(m) }
func (*RouteSummary) ProtoMessage()    {}
func (*RouteSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_0984d49a362b6b9f, []int{4}
}

func (m *RouteSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteSummary.Unmarshal(m, b)
}
func (m *RouteSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteSummary.Marshal(b, m, deterministic)
}
func (m *RouteSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteSummary.Merge(m, src)
}
func (m *RouteSummary) XXX_Size() int {
	return xxx_messageInfo_RouteSummary.Size(m)
}
func (m *RouteSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteSummary.DiscardUnknown(m)
}

var xxx_messageInfo_RouteSummary proto.InternalMessageInfo

func (m *RouteSummary) GetPointCount() int32 {
	if m != nil {
		return m.PointCount
	}
	return 0
}

func (m *RouteSummary) GetFeatureCount() int32 {
	if m != nil {
		return m.FeatureCount
	}
	return 0
}

func (m *RouteSummary) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *RouteSummary) GetElapsedTime() int32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "route.Point")
	proto.RegisterType((*Feature)(nil), "route.Feature")
	proto.RegisterType((*Rectangle)(nil), "route.Rectangle")
	proto.RegisterType((*RouteNote)(nil), "route.RouteNote")
	proto.RegisterType((*RouteSummary)(nil), "route.RouteSummary")
}

func init() { proto.RegisterFile("route.proto", fileDescriptor_0984d49a362b6b9f) }

var fileDescriptor_0984d49a362b6b9f = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x4e, 0xeb, 0x30,
	0x10, 0xac, 0xf3, 0x9a, 0xd7, 0x66, 0x93, 0xf7, 0x84, 0x96, 0x4b, 0x14, 0x21, 0x01, 0xe1, 0xd2,
	0x03, 0xaa, 0xaa, 0x52, 0x3e, 0x00, 0x55, 0xa2, 0x17, 0x04, 0x28, 0x70, 0xaf, 0x4c, 0x62, 0x5a,
	0x4b, 0x49, 0x5c, 0x25, 0x9b, 0x03, 0xdf, 0xc1, 0xcf, 0xf1, 0x39, 0x28, 0xb6, 0xd3, 0x52, 0x8a,
	0xb8, 0x65, 0x67, 0x76, 0x66, 0xec, 0x71, 0xc0, 0xaf, 0x54, 0x43, 0x62, 0xbc, 0xa9, 0x14, 0x29,
	0x74, 0xf5, 0x10, 0xdf, 0x80, 0xfb, 0xa8, 0x64, 0x49, 0x18, 0xc1, 0x30, 0xe7, 0x24, 0xa9, 0xc9,
	0x44, 0xc8, 0xce, 0xd8, 0xc8, 0x4d, 0xb6, 0x33, 0x9e, 0x80, 0x97, 0xab, 0x72, 0x65, 0x48, 0x47,
	0x93, 0x3b, 0x20, 0x5e, 0xc0, 0xe0, 0x56, 0x70, 0x6a, 0x2a, 0x81, 0x08, 0xfd, 0x92, 0x17, 0xc6,
	0xc0, 0x4b, 0xf4, 0x37, 0x8e, 0x60, 0x98, 0xab, 0x94, 0x93, 0x54, 0xa5, 0xd6, 0xfa, 0xd3, 0x60,
	0x6c, 0x0e, 0xa2, 0x83, 0x93, 0x2d, 0x1b, 0x2f, 0xc0, 0x4b, 0x44, 0x4a, 0xbc, 0x5c, 0xe5, 0x6d,
	0xa6, 0x93, 0x2b, 0x6d, 0xf4, 0x5d, 0xe0, 0xe4, 0xaa, 0x65, 0xd7, 0xf2, 0x47, 0x3b, 0x67, 0x2d,
	0xe3, 0x07, 0xf0, 0x92, 0x16, 0xba, 0x57, 0xb4, 0x9f, 0xcf, 0x7e, 0xcb, 0xc7, 0x10, 0x06, 0x85,
	0xa8, 0x6b, 0xbe, 0x32, 0x97, 0xf4, 0x92, 0x6e, 0x8c, 0xdf, 0x19, 0x04, 0xda, 0xf1, 0xa9, 0x29,
	0x0a, 0x5e, 0xbd, 0xe1, 0x29, 0xf8, 0x9b, 0x56, 0xbd, 0x4c, 0x55, 0x53, 0x92, 0x2d, 0x0c, 0x34,
	0x34, 0x6f, 0x11, 0xbc, 0x80, 0x7f, 0xaf, 0xa6, 0x14, 0xbb, 0x62, 0x6a, 0x0b, 0x2c, 0x68, 0x96,
	0x22, 0x18, 0x66, 0xb2, 0x26, 0x5e, 0xa6, 0x22, 0xfc, 0x63, 0x3a, 0xef, 0x66, 0x3c, 0x87, 0x40,
	0xe4, 0x7c, 0x53, 0x8b, 0x6c, 0x49, 0xb2, 0x10, 0x61, 0x5f, 0xf3, 0xbe, 0xc5, 0x9e, 0x65, 0x21,
	0xa6, 0x1f, 0x0c, 0x5c, 0x7d, 0x2a, 0xbc, 0x04, 0x58, 0x08, 0xea, 0x5e, 0x61, 0xef, 0x7e, 0xd1,
	0x7f, 0x3b, 0x59, 0x36, 0xee, 0xe1, 0x0c, 0x82, 0x3b, 0x59, 0x77, 0xeb, 0x35, 0x1e, 0xd9, 0x8d,
	0x6d, 0xf9, 0x87, 0x9a, 0x09, 0xc3, 0x19, 0xf8, 0x89, 0x48, 0x55, 0x95, 0x99, 0xc8, 0xfd, 0x90,
	0xe3, 0xce, 0xe2, 0x4b, 0x49, 0x71, 0x6f, 0xc4, 0xf0, 0xda, 0x3e, 0xc5, 0x7c, 0xcd, 0x69, 0x17,
	0xd4, 0x3d, 0x4e, 0x74, 0x80, 0xb4, 0xa2, 0x09, 0x7b, 0xf9, 0xab, 0x7f, 0xd2, 0xab, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x80, 0xf5, 0x93, 0x59, 0xb3, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouteClient is the client API for Route service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteClient interface {
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (Route_ListFeaturesClient, error)
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (Route_RecordRouteClient, error)
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (Route_RouteChatClient, error)
}

type routeClient struct {
	cc *grpc.ClientConn
}

func NewRouteClient(cc *grpc.ClientConn) RouteClient {
	return &routeClient{cc}
}

func (c *routeClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/route.Route/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (Route_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Route_serviceDesc.Streams[0], "/route.Route/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Route_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type routeListFeaturesClient struct {
	grpc.ClientStream
}

func (x *routeListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (Route_RecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Route_serviceDesc.Streams[1], "/route.Route/RecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeRecordRouteClient{stream}
	return x, nil
}

type Route_RecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type routeRecordRouteClient struct {
	grpc.ClientStream
}

func (x *routeRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (Route_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Route_serviceDesc.Streams[2], "/route.Route/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeRouteChatClient{stream}
	return x, nil
}

type Route_RouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type routeRouteChatClient struct {
	grpc.ClientStream
}

func (x *routeRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteServer is the server API for Route service.
type RouteServer interface {
	GetFeature(context.Context, *Point) (*Feature, error)
	ListFeatures(*Rectangle, Route_ListFeaturesServer) error
	RecordRoute(Route_RecordRouteServer) error
	RouteChat(Route_RouteChatServer) error
}

// UnimplementedRouteServer can be embedded to have forward compatible implementations.
type UnimplementedRouteServer struct {
}

func (*UnimplementedRouteServer) GetFeature(ctx context.Context, req *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (*UnimplementedRouteServer) ListFeatures(req *Rectangle, srv Route_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (*UnimplementedRouteServer) RecordRoute(srv Route_RecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordRoute not implemented")
}
func (*UnimplementedRouteServer) RouteChat(srv Route_RouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RouteChat not implemented")
}

func RegisterRouteServer(s *grpc.Server, srv RouteServer) {
	s.RegisterService(&_Route_serviceDesc, srv)
}

func _Route_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/route.Route/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteServer).ListFeatures(m, &routeListFeaturesServer{stream})
}

type Route_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type routeListFeaturesServer struct {
	grpc.ServerStream
}

func (x *routeListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _Route_RecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServer).RecordRoute(&routeRecordRouteServer{stream})
}

type Route_RecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type routeRecordRouteServer struct {
	grpc.ServerStream
}

func (x *routeRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Route_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServer).RouteChat(&routeRouteChatServer{stream})
}

type Route_RouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type routeRouteChatServer struct {
	grpc.ServerStream
}

func (x *routeRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Route_serviceDesc = grpc.ServiceDesc{
	ServiceName: "route.Route",
	HandlerType: (*RouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _Route_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _Route_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecordRoute",
			Handler:       _Route_RecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _Route_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "route.proto",
}
